------------------------------------------------------------------------------
--  Copyright (c) 2018 by Paul Scherrer Institute, Switzerland
--  All rights reserved.
--  Authors: Oliver Bruendler
------------------------------------------------------------------------------

------------------------------------------------------------
-- Testbench generated by TbGen.py
------------------------------------------------------------
-- see Library/Python/TbGenerator

------------------------------------------------------------
-- Libraries
------------------------------------------------------------
library ieee;
use ieee.std_logic_1164.all;
use ieee.numeric_std.all;
use ieee.math_real.all;

library work;
use work.psi_fix_pkg.all;
use work.psi_common_array_pkg.all;
use work.psi_common_math_pkg.all;
use work.psi_tb_textfile_pkg.all;

------------------------------------------------------------
-- Entity Declaration
------------------------------------------------------------
entity psi_fix_cordic_rot_tb is
  generic(
    gain_comp_g   : boolean := False;
    round_g      : string  := "psi_fix_trunc";
    sat_g        : string  := "psi_fix_wrap"; -- Pass as string, required by modelsim on linux
    mode_g       : string  := "PIPELINED"; -- Pass as string, required by modelsim on linux
    file_folder_g : string  := "../tesbench/psi_fix_cordic_vect_tb/Data"
  );
end entity;

------------------------------------------------------------
-- Architecture
------------------------------------------------------------
architecture sim of psi_fix_cordic_rot_tb is
  -- *** Fixed Generics ***
  constant in_abs_fmt_g    : psi_fix_fmt_t := (0, 0, 16);
  constant in_angle_fmt_g  : psi_fix_fmt_t := (0, 0, 15);
  constant out_fmt_g      : psi_fix_fmt_t := (1, 2, 16);
  constant internal_fmt_g : psi_fix_fmt_t := (1, 2, 22);
  constant angle_int_fmt_g : psi_fix_fmt_t := (1, -2, 23);
  constant iterations_g  : natural     := 21;

  -- *** Not Assigned Generics (default values) ***

  -- *** TB Control ***
  signal TbRunning            : boolean                  := True;
  signal NextCase             : integer                  := -1;
  signal ProcessDone          : std_logic_vector(0 to 1) := (others => '0');
  constant AllProcessesDone_c : std_logic_vector(0 to 1) := (others => '1');
  constant TbProcNr_stim_c    : integer                  := 0;
  constant TbProcNr_resp_c    : integer                  := 1;

  -- *** DUT Signals ***
  signal Clk    : std_logic                                               := '0';
  signal Rst    : std_logic                                               := '1';
  signal InVld  : std_logic                                               := '0';
  signal InRdy  : std_logic                                               := '1';
  signal InAbs  : std_logic_vector(psi_fix_size(in_abs_fmt_g) - 1 downto 0)   := (others => '0');
  signal InAng  : std_logic_vector(psi_fix_size(in_angle_fmt_g) - 1 downto 0) := (others => '0');
  signal OutVld : std_logic                                               := '0';
  signal OutI   : std_logic_vector(psi_fix_size(out_fmt_g) - 1 downto 0)     := (others => '0');
  signal OutQ   : std_logic_vector(psi_fix_size(out_fmt_g) - 1 downto 0)     := (others => '0');

  -- *** User Definitions ***
  constant RespFileName_c : string                 := choose(gain_comp_g, "outputWithGc.txt", "outputWithNoGc.txt");
  signal SigIn            : TextfileData_t(0 to 1) := (others => 0);
  signal SigOut           : TextfileData_t(0 to 1) := (others => 0);

begin
  ------------------------------------------------------------
  -- DUT Instantiation
  ------------------------------------------------------------
  i_dut : entity work.psi_fix_cordic_rot
    generic map(
      gain_comp_g    => gain_comp_g,
      round_g       => psi_fix_round_from_string(round_g),
      sat_g         => psi_fix_sat_from_string(sat_g),
      mode_g        => mode_g,
      in_abs_fmt_g    => in_abs_fmt_g,
      in_angle_fmt_g  => in_angle_fmt_g,
      out_fmt_g      => out_fmt_g,
      internal_fmt_g => internal_fmt_g,
      angle_int_fmt_g => angle_int_fmt_g,
      iterations_g  => iterations_g
    )
    port map(
      clk_i     => Clk,
      rst_i     => Rst,
      vld_i     => InVld,
      rdy_i     => InRdy,
      dat_abs_i => InAbs,
      dat_ang_i => InAng,
      vld_o     => OutVld,
      dat_inp_o => OutI,
      dat_qua_o => OutQ
    );

  ------------------------------------------------------------
  -- Testbench Control !DO NOT EDIT!
  ------------------------------------------------------------
  p_tb_control : process
  begin
    wait until Rst = '0';
    wait until ProcessDone = AllProcessesDone_c;
    TbRunning <= false;
    wait;
  end process;

  ------------------------------------------------------------
  -- Clocks !DO NOT EDIT!
  ------------------------------------------------------------
  p_clock_Clk : process
    constant Frequency_c : real := real(100e6);
  begin
    while TbRunning loop
      wait for 0.5 * (1 sec) / Frequency_c;
      Clk <= not Clk;
    end loop;
    wait;
  end process;

  ------------------------------------------------------------
  -- Resets
  ------------------------------------------------------------
  p_rst_Rst : process
  begin
    wait for 1 us;
    -- Wait for two clk edges to ensure reset is active for at least one edge
    wait until rising_edge(Clk);
    wait until rising_edge(Clk);
    Rst <= '0';
    wait;
  end process;

  ------------------------------------------------------------
  -- Processes
  ------------------------------------------------------------
  -- *** stim ***
  InAbs <= std_logic_vector(to_signed(SigIn(0), InAbs'length));
  InAng <= std_logic_vector(to_signed(SigIn(1), InAng'length));
  p_stim : process
  begin
    -- start of process !DO NOT EDIT

    wait until Rst = '0';
    -- Apply Stimuli
    ApplyTextfileContent(Clk         => Clk,
                         Rdy         => InRdy,
                         Vld         => InVld,
                         Data        => SigIn,
                         Filepath    => file_folder_g & "/input.txt",
                         IgnoreLines => 1);

    -- end of process !DO NOT EDIT!
    ProcessDone(TbProcNr_stim_c) <= '1';
    wait;
  end process;

  -- *** resp ***
  SigOut(0) <= to_integer(signed(OutI));
  SigOut(1) <= to_integer(signed(OutQ));
  p_resp : process
  begin
    -- start of process !DO NOT EDIT
    wait until Rst = '0';

    -- Check
    CheckTextfileContent(Clk         => Clk,
                         Rdy         => PsiTextfile_SigUnused,
                         Vld         => OutVld,
                         Data        => SigOut,
                         Filepath    => file_folder_g & "/" & RespFileName_c,
                         IgnoreLines => 1);

    -- end of process !DO NOT EDIT!
    ProcessDone(TbProcNr_resp_c) <= '1';
    wait;
  end process;

end;
