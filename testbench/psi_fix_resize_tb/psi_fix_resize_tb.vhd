------------------------------------------------------------
-- Copyright (c) 2020 by Paul Scherrer Institute, Switzerland
-- All rights reserved.
------------------------------------------------------------

------------------------------------------------------------
-- Testbench generated by TbGen.py
------------------------------------------------------------
-- see Library/Python/TbGenerator

------------------------------------------------------------
-- Libraries
------------------------------------------------------------
library ieee;
	use ieee.std_logic_1164.all;
	use ieee.numeric_std.all;

library work;
	use work.psi_fix_pkg.all;
	use work.psi_tb_compare_pkg.all;

------------------------------------------------------------
-- Entity Declaration
------------------------------------------------------------
entity psi_fix_resize_tb is
end entity;

------------------------------------------------------------
-- Architecture
------------------------------------------------------------
architecture sim of psi_fix_resize_tb is
	-- *** Fixed Generics ***
	constant in_fmt_g : psi_fix_fmt_t := (1,1,14);
	constant out_fmt_g : psi_fix_fmt_t := (0,0,3);
	constant round_g : psi_fix_rnd_t := psi_fix_round;
	constant sat_g : psi_fix_sat_t := psi_fix_sat;
	
	-- *** Not Assigned Generics (default values) ***
	
	-- *** TB Control ***
	signal TbRunning : boolean := True;
	signal NextCase : integer := -1;
	signal ProcessDone : std_logic_vector(0 to 1) := (others => '0');
	constant AllProcessesDone_c : std_logic_vector(0 to 1) := (others => '1');
	constant TbProcNr_stim_c : integer := 0;
	constant TbProcNr_resp_c : integer := 1;
	
	-- *** DUT Signals ***
	signal Clk : std_logic := '1';
	signal Rst : std_logic := '1';
	signal InVld : std_logic := '0';
	signal InRdy : std_logic := '1';
	signal InData : std_logic_vector(psi_fix_size(in_fmt_g)-1 downto 0) := (others => '0');
	signal OutVld : std_logic := '0';
	signal OutRdy : std_logic := '0';
	signal OutData : std_logic_vector(psi_fix_size(out_fmt_g)-1 downto 0) := (others => '0');
	
begin
	------------------------------------------------------------
	-- DUT Instantiation
	------------------------------------------------------------
	i_dut : entity work.psi_fix_resize_pipe
		generic map (
			in_fmt_g => in_fmt_g,
			out_fmt_g => out_fmt_g,
			round_g => round_g,
			sat_g => sat_g
		)
		port map (
			clk_i => Clk,
			rst_i => Rst,
			vld_i => InVld,
			rdy_o => InRdy,
			dat_i => InData,
			vld_o => OutVld,
			rdy_i => OutRdy,
			dat_o => OutData
		);
	
	------------------------------------------------------------
	-- Testbench Control !DO NOT EDIT!
	------------------------------------------------------------
	p_tb_control : process
	begin
		wait until Rst = '0';
		wait until ProcessDone = AllProcessesDone_c;
		TbRunning <= false;
		wait;
	end process;
	
	------------------------------------------------------------
	-- Clocks !DO NOT EDIT!
	------------------------------------------------------------
	p_clock_Clk : process
		constant Frequency_c : real := real(100e6);
	begin
		while TbRunning loop
			wait for 0.5*(1 sec)/Frequency_c;
			Clk <= not Clk;
		end loop;
		wait;
	end process;
	
	
	------------------------------------------------------------
	-- Resets
	------------------------------------------------------------
	p_rst_Rst : process
	begin
		wait for 1 us;
		-- Wait for two clk edges to ensure reset is active for at least one edge
		wait until rising_edge(Clk);
		wait until rising_edge(Clk);
		Rst <= '0';
		wait;
	end process;
	
	
	------------------------------------------------------------
	-- Processes
	------------------------------------------------------------
	-- *** stim ***
	p_stim : process
	begin
		-- start of process !DO NOT EDIT
		wait until Rst = '0';
		wait until rising_edge(Clk);
		
		-- Test no saturation/no rounding
		InVld <= '1';
		InData <= psi_fix_from_real(0.5, in_fmt_g);
		wait until rising_edge(Clk) and InRdy = '1';
		
		InData <= psi_fix_from_real(0.25, in_fmt_g);
		wait until rising_edge(Clk) and InRdy = '1';
		
		InData <= psi_fix_from_real(0.75, in_fmt_g);
		wait until rising_edge(Clk) and InRdy = '1';
		
		-- Test Rounding
		InData <= psi_fix_from_real(0.47, in_fmt_g);
		wait until rising_edge(Clk) and InRdy = '1';
		
		InData <= psi_fix_from_real(0.53, in_fmt_g);
		wait until rising_edge(Clk) and InRdy = '1';	

		-- Test Saturation
		InData <= psi_fix_from_real(1.8, in_fmt_g);
		wait until rising_edge(Clk) and InRdy = '1';		
		
		InData <= psi_fix_from_real(-0.5, in_fmt_g);
		wait until rising_edge(Clk) and InRdy = '1';

		-- Last check to see if normal numbers still pass
		InData <= psi_fix_from_real(0.5, in_fmt_g);
		wait until rising_edge(Clk) and InRdy = '1';
		InVld <= '0';
		
		
		-- end of process !DO NOT EDIT!
		ProcessDone(TbProcNr_stim_c) <= '1';
		wait;
	end process;
	
	-- *** resp ***
	p_resp : process
	begin
		-- start of process !DO NOT EDIT
		wait until Rst = '0';
		
		-- Test no saturation/no rounding
		OutRdy <= '1';
		
		wait until rising_edge(Clk) and OutVld = '1';
		StdlvCompareStdlv(psi_fix_from_real(0.5, out_fmt_g), OutData, "Data0");

		wait until rising_edge(Clk) and OutVld = '1';
		StdlvCompareStdlv(psi_fix_from_real(0.25, out_fmt_g), OutData, "Data1");
		
		-- Test Back Pressure
		OutRdy <= '0';
		for i in 0 to 9 loop
			wait until rising_edge(Clk);
		end loop;
		OutRdy <= '1';
		
		wait until rising_edge(Clk) and OutVld = '1';
		StdlvCompareStdlv(psi_fix_from_real(0.75, out_fmt_g), OutData, "Data2");
		
		-- Test Rounding
		wait until rising_edge(Clk) and OutVld = '1';
		StdlvCompareStdlv(psi_fix_from_real(0.5, out_fmt_g), OutData, "Data3");
		
		wait until rising_edge(Clk) and OutVld = '1';
		StdlvCompareStdlv(psi_fix_from_real(0.5, out_fmt_g), OutData, "Data4");

		-- Test Saturation
		wait until rising_edge(Clk) and OutVld = '1';
		StdlvCompareStdlv(psi_fix_from_real(1.0-1.0/8.0, out_fmt_g), OutData, "Data5");		
		
		wait until rising_edge(Clk) and OutVld = '1';
		StdlvCompareStdlv(psi_fix_from_real(0.0, out_fmt_g), OutData, "Data6");

		-- Last check to see if normal numbers still pass
		wait until rising_edge(Clk) and OutVld = '1';
		StdlvCompareStdlv(psi_fix_from_real(0.5, out_fmt_g), OutData, "Data7");
		
		
		-- end of process !DO NOT EDIT!
		ProcessDone(TbProcNr_resp_c) <= '1';
		wait;
	end process;
	
	
end;
