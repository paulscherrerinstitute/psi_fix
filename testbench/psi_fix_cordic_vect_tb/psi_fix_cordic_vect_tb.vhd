------------------------------------------------------------
-- Testbench generated by TbGen.py
------------------------------------------------------------
-- see Library/Python/TbGenerator

------------------------------------------------------------
-- Libraries
------------------------------------------------------------
library ieee;
	use ieee.std_logic_1164.all;
	use ieee.numeric_std.all;
	use ieee.math_real.all;

library work;
	use work.psi_fix_pkg.all;
	use work.psi_common_array_pkg.all;
	use work.psi_common_math_pkg.all;
	use work.psi_tb_textfile_pkg.all;

------------------------------------------------------------
-- Entity Declaration
------------------------------------------------------------
entity psi_fix_cordic_vect_tb is
	generic (
		GainComp_g 		: boolean 		:= False ;
		Round_g 		: string 		:= "PsiFixTrunc" ;	-- Pass as string, required by modelsim on linux
		Sat_g 			: string 		:= "PsiFixWrap" ;	-- Pass as string, required by modelsim on linux
		Mode_g 			: string 		:= "PIPELINED";
		FileFolder_g	: string 		:= "../tesbench/psi_fix_cordic_vect_tb/Data";
		PlStgPerIter_g	: integer range 1 to 2	:= 1
	);
end entity;

------------------------------------------------------------
-- Architecture
------------------------------------------------------------
architecture sim of psi_fix_cordic_vect_tb is
	-- *** Fixed Generics ***
	constant InFmt_g : PsiFixFmt_t := (1,0,15);
	constant OutFmt_g : PsiFixFmt_t := (0,2,16);
	constant InternalFmt_g : PsiFixFmt_t := (1,2,22);
	constant AngleFmt_g : PsiFixFmt_t := (0,0,15);
	constant AngleIntFmt_g : PsiFixFmt_t := (1,0,18);
	constant Iterations_g : natural := 13;
	
	-- *** Not Assigned Generics (default values) ***
	
	-- *** TB Control ***
	signal TbRunning : boolean := True;
	signal NextCase : integer := -1;
	signal ProcessDone : std_logic_vector(0 to 1) := (others => '0');
	constant AllProcessesDone_c : std_logic_vector(0 to 1) := (others => '1');
	constant TbProcNr_stim_c : integer := 0;
	constant TbProcNr_resp_c : integer := 1;
	
	-- *** DUT Signals ***
	signal Clk : std_logic := '0';
	signal Rst : std_logic := '1';
	signal InVld : std_logic := '0';
	signal InRdy : std_logic := '1';
	signal InI : std_logic_vector(PsiFixSize(InFmt_g)-1 downto 0) := (others => '0');
	signal InQ : std_logic_vector(PsiFixSize(InFmt_g)-1 downto 0) := (others => '0');
	signal OutVld : std_logic := '0';
	signal OutAbs : std_logic_vector(PsiFixSize(OutFmt_g)-1 downto 0) := (others => '0');
	signal OutAng : std_logic_vector(PsiFixSize(AngleFmt_g)-1 downto 0) := (others => '0');
	
	-- *** User Definitions ***
	constant RespFileName_c : string	:= choose(GainComp_g, "outputWithGc.txt", "outputWithNoGc.txt");
	signal RespFileSig : TextfileData_t(0 to 1)(31 downto 0);
	
begin
	------------------------------------------------------------
	-- DUT Instantiation
	------------------------------------------------------------
	i_dut : entity work.psi_fix_cordic_vect
		generic map (
			GainComp_g => GainComp_g,
			Round_g => PsiFixRoundFromString(Round_g),
			Sat_g => PsiFixSatFromString(Sat_g),
			Mode_g => Mode_g,
			InFmt_g => InFmt_g,
			OutFmt_g => OutFmt_g,
			InternalFmt_g => InternalFmt_g,
			AngleFmt_g => AngleFmt_g,
			AngleIntFmt_g => AngleIntFmt_g,
			Iterations_g => Iterations_g,
			PlStgPerIter_g => PlStgPerIter_g
		)
		port map (
			Clk => Clk,
			Rst => Rst,
			InVld => InVld,
			InRdy => InRdy,
			InI => InI,
			InQ => InQ,
			OutVld => OutVld,
			OutAbs => OutAbs,
			OutAng => OutAng
		);
	
	------------------------------------------------------------
	-- Testbench Control !DO NOT EDIT!
	------------------------------------------------------------
	p_tb_control : process
	begin
		wait until Rst = '0';
		wait until ProcessDone = AllProcessesDone_c;
		TbRunning <= false;
		wait;
	end process;
	
	------------------------------------------------------------
	-- Clocks !DO NOT EDIT!
	------------------------------------------------------------
	p_clock_Clk : process
		constant Frequency_c : real := real(100e6);
	begin
		while TbRunning loop
			wait for 0.5*(1 sec)/Frequency_c;
			Clk <= not Clk;
		end loop;
		wait;
	end process;
	
	
	------------------------------------------------------------
	-- Resets
	------------------------------------------------------------
	p_rst_Rst : process
	begin
		wait for 1 us;
		-- Wait for two clk edges to ensure reset is active for at least one edge
		wait until rising_edge(Clk);
		wait until rising_edge(Clk);
		Rst <= '0';
		wait;
	end process;
	
	
	------------------------------------------------------------
	-- Processes
	------------------------------------------------------------
	-- *** stim ***
	p_stim : process
	begin
		-- start of process !DO NOT EDIT
		wait until Rst = '0';
		
		-- Apply Stimuli	
		appy_textfile_content(	Clk 		=> Clk, 
								Rdy 		=> InRdy,
								Vld 		=> InVld, 
								Data(0)		=> InI, 
								Data(1)		=> InQ,
								Filepath	=> FileFolder_g & "/input.txt", 
								IgnoreLines => 1);		
		
		-- end of process !DO NOT EDIT!
		ProcessDone(TbProcNr_stim_c) <= '1';
		wait;
	end process;
	
	-- *** resp ***
	RespFileSig(0) <= (OutAbs'high downto OutAbs'low => OutAbs, others => '0');	-- unsigned --> extend with zeros
	RespFileSig(1) <= (OutAng'high downto OutAng'low => OutAng, others => '0'); -- unsigned --> extend with zeros
	p_resp : process
	begin
		-- start of process !DO NOT EDIT
		wait until Rst = '0';
		
		-- Check
		check_textfile_content(	Clk			=> Clk,
								Rdy			=> PsiTextfile_SigUnused,
								Vld			=> OutVld,
								Data		=> RespFileSig,
								Filepath	=> FileFolder_g & "/" & RespFileName_c,
								IgnoreLines => 1);
		
		-- end of process !DO NOT EDIT!
		ProcessDone(TbProcNr_resp_c) <= '1';
		wait;
	end process;
	
	
end;
