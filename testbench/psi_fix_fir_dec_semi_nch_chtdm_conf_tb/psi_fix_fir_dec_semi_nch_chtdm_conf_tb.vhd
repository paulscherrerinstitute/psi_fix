------------------------------------------------------------
-- Copyright (c) 2019 by Paul Scherrer Institute, Switzerland
-- All rights reserved.
------------------------------------------------------------

------------------------------------------------------------
-- Testbench generated by TbGen.py
------------------------------------------------------------
-- see Library/Python/TbGenerator

------------------------------------------------------------
-- Libraries
------------------------------------------------------------
library ieee;
use ieee.std_logic_1164.all;
use ieee.numeric_std.all;
use ieee.math_real.all;

library std;
use std.textio.all;

library work;
use work.psi_fix_pkg.all;
use work.psi_common_math_pkg.all;
use work.psi_common_array_pkg.all;
use work.psi_tb_txt_util.all;
use work.psi_tb_textfile_pkg.all;
use work.psi_fix_fir_dec_semi_nch_chtdm_conf_tb_coefs_pkg.all;

------------------------------------------------------------
-- Entity Declaration
------------------------------------------------------------
entity psi_fix_fir_dec_semi_nch_chtdm_conf_tb is
  generic(
    channels_g           : natural  := 3;
    taps_g               : natural  := 48;
    clk_per_spl_g          : positive := 10;
    use_fix_coefs_g        : boolean  := true;
    init_coefs_g          : boolean  := false;
    full_inp_rate_support_g : boolean  := false;
    multipliers_g        : positive := 8;
    ratio_g              : positive := 3;
    ram_behavior_g        : string   := "RBW";
    file_folder_g         : string   := "../testbench/psi_fix_fir_dec_semi_nch_chtdm_conf_tb/Data";
    impl_flush_if_g        : boolean  := true
  );
end entity;

------------------------------------------------------------
-- Architecture
------------------------------------------------------------
architecture sim of psi_fix_fir_dec_semi_nch_chtdm_conf_tb is

  -- *** File Selection ***
  constant InFile_c    : string := "Input_" & to_string(channels_g) & "Ch.txt";
  constant OutFile_c   : string := "Output_" & to_string(channels_g) & "Ch_R" & to_string(ratio_g) & "_" & to_string(taps_g) & "Taps.txt";
  constant CoefsFile_c : string := "Coefs_" & "R" & to_string(ratio_g) & "_" & to_string(taps_g) & "Taps.txt";

  -- *** Fixed Generics ***
  constant in_fmt_g   : psi_fix_fmt_t := (1, 0, 15);
  constant out_fmt_g  : psi_fix_fmt_t := (1, 0, 13);
  constant coef_fmt_g : psi_fix_fmt_t := (1, 0, 17);

  -- *** Not Assigned Generics (default values) ***
  constant rnd_g      : psi_fix_rnd_t := psi_fix_round;
  constant sat_g      : psi_fix_sat_t := psi_fix_sat;
  constant fix_coefs_g : t_areal     := (0.0, 0.0);

  -- *** TB Control ***
  signal TbRunning            : boolean                  := True;
  signal NextCase             : integer                  := -1;
  signal ProcessDone          : std_logic_vector(0 to 1) := (others => '0');
  constant AllProcessesDone_c : std_logic_vector(0 to 1) := (others => '1');
  constant TbProcNr_stim_c    : integer                  := 0;
  constant TbProcNr_resp_c    : integer                  := 1;

  -- *** DUT Signals ***
  signal Clk        : std_logic                                            := '1';
  signal Rst        : std_logic                                            := '1';
  signal InVld      : std_logic                                            := '0';
  signal InData     : std_logic_vector(psi_fix_size(in_fmt_g) - 1 downto 0)   := (others => '0');
  signal OutVld     : std_logic                                            := '0';
  signal OutData    : std_logic_vector(psi_fix_size(out_fmt_g) - 1 downto 0)  := (others => '0');
  signal CoefWr     : std_logic                                            := '0';
  signal CoefAddr   : std_logic_vector(log2ceil(taps_g) - 1 downto 0)      := (others => '0');
  signal CoefWrData : std_logic_vector(psi_fix_size(coef_fmt_g) - 1 downto 0) := (others => '0');
  signal FlushMem   : std_logic                                            := '0';
  signal FlushDone  : std_logic                                            := '0';

  signal SigIn  : TextfileData_t(0 to 0) := (others => 0);
  signal SigOut : TextfileData_t(0 to 0) := (others => 0);

  function GetFixCoefs return t_areal is
    constant ZeroCoefs : t_areal(0 to taps_g - 1) := (others => 0.0);
  begin
    if use_fix_coefs_g or init_coefs_g then
      if ratio_g = 3 and taps_g = 48 then
        return Coefs_R3_48Taps;         -- from package
      elsif ratio_g = 1 and taps_g = 48 then
        return Coefs_R1_48Taps;         -- from package
      elsif ratio_g = 12 and taps_g = 160 then
        return Coefs_R12_160Taps;       -- from package
      else
        report "###ERROR###: psi_fix_fir_dec_semi_nch_chtdm_conf_tb: no fixed coef configuration for this Ratio/Taps setting" severity error;
        return ZeroCoefs;
      end if;
    else
      return ZeroCoefs;
    end if;
  end function;

begin
  ------------------------------------------------------------
  -- DUT Instantiation
  ------------------------------------------------------------
  i_dut : entity work.psi_fix_fir_dec_semi_nch_chtdm_conf
    generic map(
      channels_g           => channels_g,
      multipliers_g        => multipliers_g,
      ratio_g              => ratio_g,
      taps_g               => taps_g,
      in_fmt_g              => in_fmt_g,
      out_fmt_g             => out_fmt_g,
      coef_fmt_g            => coef_fmt_g,
      use_fix_coefs_g        => use_fix_coefs_g,
      coefs_g              => GetFixCoefs,
      full_inp_rate_support_g => full_inp_rate_support_g,
      ram_behavior_g        => ram_behavior_g,
      rnd_g                => rnd_g,
      sat_g                => sat_g,
      impl_flush_if_g        => impl_flush_if_g
    )
    port map(
      clk_i         => Clk,
      rst_i         => Rst,
      vld_i         => InVld,
      dat_i         => InData,
      vld_o         => OutVld,
      dat_o         => OutData,
      coef_wr_i     => CoefWr,
      coef_addr_i   => CoefAddr,
      coef_wr_dat_i => CoefWrData,
      flush_mem_i   => FlushMem,
      flush_done_o  => FlushDone
    );

  ------------------------------------------------------------
  -- Testbench Control !DO NOT EDIT!
  ------------------------------------------------------------
  p_tb_control : process
  begin
    wait until Rst = '0';
    wait until ProcessDone = AllProcessesDone_c;
    TbRunning <= false;
    wait;
  end process;

  ------------------------------------------------------------
  -- Clocks !DO NOT EDIT!
  ------------------------------------------------------------
  p_clock_Clk : process
    constant Frequency_c : real := real(100e6);
  begin
    while TbRunning loop
      wait for 0.5 * (1 sec) / Frequency_c;
      Clk <= not Clk;
    end loop;
    wait;
  end process;

  ------------------------------------------------------------
  -- Processes
  ------------------------------------------------------------
  -- *** stim ***
  InData <= std_logic_vector(to_signed(SigIn(0), InData'length));
  p_stim : process
    file fp       : text;
    variable ln   : line;
    variable Coef : integer;
  begin
    -- start of process !DO NOT EDIT
    wait for 1 us;
    -- Wait for two clk edges to ensure reset is active for at least one edge
    wait until rising_edge(Clk);
    wait until rising_edge(Clk);
    Rst <= '0';
    wait until rising_edge(Clk);

    if not use_fix_coefs_g and not init_coefs_g then
      -- Write Coefficients
      if not use_fix_coefs_g then
        file_open(fp, file_folder_g & "/" & CoefsFile_c, read_mode);
        readline(fp, ln);               -- ignore title line
        for i in 0 to taps_g - 1 loop
          readline(fp, ln);
          read(ln, Coef);
          wait until rising_edge(Clk);
          CoefAddr   <= std_logic_vector(to_unsigned(i, CoefAddr'length));
          CoefWr     <= '1';
          CoefWrData <= std_logic_vector(to_signed(Coef, CoefWrData'length));
          wait until rising_edge(Clk);
          CoefWr     <= '0';
        end loop;
      end if;
    end if;
    wait until rising_edge(Clk);
    wait until rising_edge(Clk);

    -- Apply Stimuli
    ApplyTextfileContent(Clk           => Clk,
                         Rdy           => PsiTextfile_SigOne,
                         Vld           => InVld,
                         Data          => SigIn,
                         Filepath      => file_folder_g & "/" & InFile_c,
                         ClkPerSpl     => clk_per_spl_g,
                         IgnoreLines   => 1,
                         DataOnlyOnVld => true);

    -- In case flush-interface is implemented, try out if not leftovers are present after flushing
    if impl_flush_if_g then
      -- Wait until first stimuli run faded out
      wait for 10 us;

      -- Reset filter
      wait until rising_edge(Clk);
      Rst <= '1';
      wait until rising_edge(Clk);
      Rst <= '0';

      -- Flush Memory
      wait until rising_edge(Clk);
      FlushMem <= '1';
      wait until rising_edge(Clk);
      FlushMem <= '0';
      wait until rising_edge(Clk) and FlushDone = '1';

      -- Second stimuli run
      ApplyTextfileContent(Clk           => Clk,
                           Rdy           => PsiTextfile_SigOne,
                           Vld           => InVld,
                           Data          => SigIn,
                           Filepath      => file_folder_g & "/" & InFile_c,
                           ClkPerSpl     => clk_per_spl_g,
                           IgnoreLines   => 1,
                           DataOnlyOnVld => true);
    end if;

    -- end of process !DO NOT EDIT!
    ProcessDone(TbProcNr_stim_c) <= '1';
    wait;
  end process;

  -- *** resp ***
  SigOut(0) <= to_integer(signed(OutData));
  p_resp : process
  begin
    -- start of process !DO NOT EDIT
    wait until Rst = '0';

    -- User Code
    CheckTextfileContent(Clk         => Clk,
                         Rdy         => PsiTextfile_SigUnused,
                         Vld         => OutVld,
                         Data        => SigOut,
                         Filepath    => file_folder_g & "/" & OutFile_c,
                         IgnoreLines => 1);

    -- In case flush-interface is implemented, try out if not leftovers are present after flushing
    if impl_flush_if_g then
      CheckTextfileContent(Clk         => Clk,
                           Rdy         => PsiTextfile_SigUnused,
                           Vld         => OutVld,
                           Data        => SigOut,
                           Filepath    => file_folder_g & "/" & OutFile_c,
                           IgnoreLines => 1);
    end if;

    -- end of process !DO NOT EDIT!
    ProcessDone(TbProcNr_resp_c) <= '1';
    wait;
  end process;

end;
